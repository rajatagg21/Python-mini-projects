To communicate between your `NotificationListenerService` and `MainActivity` using a **local binder**, and access **active notifications**, follow this setup:

---

## üß± 1. `NotificationListenerService` with Local Binder

```kotlin
class MyNotificationListenerService : NotificationListenerService() {

    private val binder = LocalBinder()

    inner class LocalBinder : Binder() {
        fun getService(): MyNotificationListenerService = this@MyNotificationListenerService
    }

    override fun onBind(intent: Intent): IBinder {
        return if (intent.action == NotificationListenerService.SERVICE_INTERFACE) {
            super.onBind(intent) // required for system binding
        } else {
            binder // our local binder
        }
    }

    fun getActiveNotificationTexts(): List<String> {
        return activeNotifications
            .mapNotNull { it.notification.extras.getCharSequence(Notification.EXTRA_TEXT)?.toString() }
    }
}
```

> ‚ö†Ô∏è Use `activeNotifications` only after the service is connected and permission is granted.

---

## üß© 2. `MainActivity` Binds to the Service

```kotlin
class MainActivity : AppCompatActivity() {

    private var notificationService: MyNotificationListenerService? = null
    private var isBound = false

    private val serviceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            val binder = service as? MyNotificationListenerService.LocalBinder
            notificationService = binder?.getService()
            isBound = true

            // Example usage:
            val texts = notificationService?.getActiveNotificationTexts() ?: emptyList()
            Toast.makeText(this@MainActivity, "Found ${texts.size} notifications", Toast.LENGTH_SHORT).show()
        }

        override fun onServiceDisconnected(name: ComponentName?) {
            notificationService = null
            isBound = false
        }
    }

    override fun onStart() {
        super.onStart()
        Intent(this, MyNotificationListenerService::class.java).also { intent ->
            bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)
        }
    }

    override fun onStop() {
        super.onStop()
        if (isBound) {
            unbindService(serviceConnection)
            isBound = false
        }
    }
}
```

---

## üîê 3. Don‚Äôt Forget Notification Listener Permission

Make sure user has granted permission:

```kotlin
fun isNotificationServiceEnabled(context: Context): Boolean {
    val cn = ComponentName(context, MyNotificationListenerService::class.java)
    return NotificationManagerCompat.getEnabledListenerPackages(context).contains(cn.packageName)
}
```

---

## ‚úÖ AndroidManifest.xml

```xml
<service
    android:name=".MyNotificationListenerService"
    android:label="Notification Listener"
    android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">
    <intent-filter>
        <action android:name="android.service.notification.NotificationListenerService" />
    </intent-filter>
</service>
```

---

## ‚òëÔ∏è Summary

* `MyNotificationListenerService` exposes a `getActiveNotificationTexts()` method.
* `MainActivity` binds with `ServiceConnection`.
* You get live access to `activeNotifications`.

Let me know if you want to stream updates with LiveData or Flow too.
