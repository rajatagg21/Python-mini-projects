Perfect! Based on your XML layout, hereâ€™s the **fully integrated `DialogFragment` code** that:

* Displays the **progress bar** and live `X/Total` updates
* Has a **cancel button** that cancels the coroutine
* Uses your custom layout exactly as you posted

---

### âœ… 1. XML: `res/layout/dialog_processing.xml`

(You already have this, but for clarity):

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="24dp">

    <TextView
        android:id="@+id/dialog_title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Processing Notifications"
        android:textSize="20sp"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/progress_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="0/200 notifications processed" />

    <ProgressBar
        android:id="@+id/progress_bar"
        style="?android:attr/progressBarStyleHorizontal"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp" />
</LinearLayout>
```

---

### âœ… 2. Kotlin: `ProcessingDialogFragment.kt`

```kotlin
class ProcessingDialogFragment(
    private val notifications: List<Notification>,
    private val processItem: suspend (Notification) -> Unit,
    private val onCompleted: () -> Unit = {},
    private val onCancelled: () -> Unit = {}
) : DialogFragment() {

    private var progressTextView: TextView? = null
    private var progressBar: ProgressBar? = null
    private val processingScope = CoroutineScope(SupervisorJob() + Dispatchers.Default)

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
        val view = LayoutInflater.from(requireContext())
            .inflate(R.layout.dialog_processing, null)

        progressTextView = view.findViewById(R.id.progress_text_view)
        progressBar = view.findViewById(R.id.progress_bar)

        progressBar?.max = notifications.size
        progressBar?.progress = 0

        val builder = AlertDialog.Builder(requireContext())
            .setView(view)
            .setCancelable(false)
            .setNegativeButton("Cancel") { _, _ ->
                processingScope.cancel("User cancelled")
            }

        return builder.create()
    }

    override fun onStart() {
        super.onStart()
        startProcessing()
    }

    private fun startProcessing() {
        processingScope.launch {
            try {
                val total = notifications.size

                for ((index, notif) in notifications.withIndex()) {
                    if (!isActive) break

                    processItem(notif)

                    withContext(Dispatchers.Main) {
                        val current = index + 1
                        progressTextView?.text = "$current/$total notifications processed"
                        progressBar?.progress = current
                    }
                }

                withContext(Dispatchers.Main) {
                    if (isActive) {
                        onCompleted()
                        dismissAllowingStateLoss()
                    }
                }
            } catch (e: CancellationException) {
                withContext(Dispatchers.Main) {
                    onCancelled()
                    dismissAllowingStateLoss()
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(requireContext(), "Failed: ${e.message}", Toast.LENGTH_SHORT).show()
                    dismissAllowingStateLoss()
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        processingScope.cancel()
        progressTextView = null
        progressBar = null
    }
}
```

---

### âœ… 3. How to Use It

In your `Activity` or `Fragment`:

```kotlin
fun startNotificationProcessing(notifications: List<Notification>) {
    val dialog = ProcessingDialogFragment(
        notifications = notifications,
        processItem = { notif ->
            delay(200) // Replace with your actual processing logic
        },
        onCompleted = {
            Toast.makeText(this, "All notifications processed.", Toast.LENGTH_SHORT).show()
        },
        onCancelled = {
            Toast.makeText(this, "Processing cancelled by user.", Toast.LENGTH_SHORT).show()
        }
    )

    dialog.show(supportFragmentManager, "ProcessingDialog")
}
```

---

### ðŸ”§ Tips

* Use `requireActivity().supportFragmentManager` if calling from a fragment.
* You can also pass `Dispatchers.IO` if your `processItem` is I/O heavy.
* Customize titles/messages or allow dynamic size via dialog arguments if needed.

Let me know if you want this to support **LiveData** or **ViewModel** in MVVM.
