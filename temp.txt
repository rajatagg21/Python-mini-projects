Got it — your goal is:

* To **keep `NotificationsFragment` as the owner** of the prediction logic.
* The `ProcessingDialogFragment` will be **dumb**: it only **shows progress** (`x/y` + progress bar).
* Prediction starts **on button click** in `NotificationsFragment`.
* `NotificationsFragment` will:

  * Launch the dialog
  * Perform model inference on each notification
  * Update progress on the dialog
  * Handle cancellation (user pressing "Cancel")

---

### ✅ Clean Division of Responsibility

| `NotificationsFragment`          | `ProcessingDialogFragment`                |
| -------------------------------- | ----------------------------------------- |
| Owns the data and coroutine      | Only displays progress UI                 |
| Runs the prediction loop         | Receives updates via `updateProgress()`   |
| Cancels coroutine on user cancel | Just calls back via `onCancelRequested()` |

---

## ✅ 1. `ProcessingDialogFragment.kt`

This fragment is now just a UI with:

* Progress bar
* Cancel button
* One method: `updateProgress(current, total)`
* A listener for "Cancel" button

```kotlin
class ProcessingDialogFragment(
    private val onCancelRequested: () -> Unit
) : DialogFragment() {

    private var progressTextView: TextView? = null
    private var progressBar: ProgressBar? = null

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
        val view = LayoutInflater.from(requireContext())
            .inflate(R.layout.dialog_processing, null)

        progressTextView = view.findViewById(R.id.progress_text_view)
        progressBar = view.findViewById(R.id.progress_bar)

        val builder = AlertDialog.Builder(requireContext())
            .setView(view)
            .setCancelable(false)
            .setNegativeButton("Cancel") { _, _ ->
                onCancelRequested()
            }

        return builder.create()
    }

    fun updateProgress(current: Int, total: Int) {
        progressTextView?.text = "$current/$total notifications processed"
        progressBar?.max = total
        progressBar?.progress = current
    }

    override fun onDestroyView() {
        super.onDestroyView()
        progressTextView = null
        progressBar = null
    }
}
```

---

## ✅ 2. Inside `NotificationsFragment.kt`

```kotlin
class NotificationsFragment : Fragment() {

    private var processingJob: Job? = null
    private var dialog: ProcessingDialogFragment? = null

    // This gets called on predict button click
    fun onPredictClicked(notifications: List<Notification>) {
        dialog = ProcessingDialogFragment(
            onCancelRequested = {
                processingJob?.cancel("User cancelled")
            }
        )

        dialog?.show(parentFragmentManager, "progress")

        processingJob = lifecycleScope.launch(Dispatchers.Default) {
            val total = notifications.size

            try {
                for ((index, notif) in notifications.withIndex()) {
                    // Make sure this is cooperative with cancellation
                    process(notif)

                    withContext(Dispatchers.Main) {
                        dialog?.updateProgress(index + 1, total)
                    }
                }

                withContext(Dispatchers.Main) {
                    dialog?.dismissAllowingStateLoss()
                    Toast.makeText(requireContext(), "All done", Toast.LENGTH_SHORT).show()
                }
            } catch (e: CancellationException) {
                withContext(Dispatchers.Main) {
                    dialog?.dismissAllowingStateLoss()
                    Toast.makeText(requireContext(), "Cancelled", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private suspend fun process(notif: Notification) {
        delay(200) // Your real model inference logic here
    }

    override fun onDestroyView() {
        super.onDestroyView()
        processingJob?.cancel()
        dialog = null
    }
}
```

---

## ✅ Summary

* `DialogFragment` is **pure UI** and stateless except `updateProgress`.
* `NotificationsFragment` is **in control**: data, coroutine, cancellation.
* Cancel button callback just cancels the coroutine in fragment.

---

### Let me know if:

* You want this wrapped with a **ViewModel** (`StateFlow` or `LiveData`).
* You want a **determinate progress bar with percentage**.
* You’re also showing inference results back in the UI after dialog closes.
