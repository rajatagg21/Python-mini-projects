private var _binding: FragmentNotificationsBinding? = null
private val binding get() = _binding!!

private lateinit var adapter: SectionedNotifAdapter
private val notifList = mutableListOf<NotifObject>() // Flat list of NotifObjects


binding.btnPredictNotifications.setOnClickListener {
    // Step 1: Fetch and classify (mocked for now)
    val resultMap = getMockResults()

    // Step 2: Store flat NotifObject list for feedback
    notifList.clear()
    notifList.addAll(resultMap.values.flatten())

    // Step 3: Flatten into sectioned list and bind adapter
    val flatList = flattenMap(resultMap)

    adapter = SectionedNotifAdapter(flatList) { notif, feedback ->
        notif.feedback = feedback // Reflect in global list
    }

    binding.recyclerView.adapter = adapter
}


binding.btnSubmit.setOnClickListener {
    val feedbacks = notifList.filter { it.feedback != Feedback.NONE }

    if (feedbacks.isEmpty()) {
        Toast.makeText(requireContext(), "No feedback given.", Toast.LENGTH_SHORT).show()
    } else {
        // TODO: Save to DB
        Toast.makeText(requireContext(), "Saved ${feedbacks.size} feedback(s)", Toast.LENGTH_SHORT).show()
    }
}

binding.btnReset.setOnClickListener {
    notifList.forEach { it.feedback = Feedback.NONE }
    adapter.notifyDataSetChanged()
}

private fun getMockResults(): Map<YourEnumLabel, List<NotifObject>> {
    return mapOf(
        YourEnumLabel.FINANCE to listOf(
            NotifObject("₹10,000 credited", 0.94f, YourEnumLabel.FINANCE),
            NotifObject("₹5,000 debited", 0.91f, YourEnumLabel.FINANCE)
        ),
        YourEnumLabel.PROMOTION to listOf(
            NotifObject("Recharge and get 30% off", 0.87f, YourEnumLabel.PROMOTION)
        )
    )
}
